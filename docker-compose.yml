# 1. In docker compose v2 we don't have to specify the version, it will use the latest by default
# 2. All variables that we use like ${SOMETHING} are defined in .env file that must be placed on the same level as this file
# 3. In volumes we use - ./application:${LARAVEL_ROOT} to mount files in our system that are located in ./application directory to ${LARAVEL_ROOT} directory in the container
#    ${LARAVEL_ROOT} is a default directory that we set as WORKDIR in Dockerfile for our laravel project files
#    specifying this in volumes of our servers we make the same local files available in each container
# 4. It's important to keep user as user: "1000:1000" everywhere to match the user and group of the files in our system that we mount to the containers to prevent permission issues

services:
  react-webserver:
    build: 
      context: .
      dockerfile: ./docker/frontend/Dockerfile
      args:
        VITE_API_PORT: ${WEB_SERVER_PORT}
    container_name: ${PROJECT_NAME}_react-webserver
    working_dir: /app
    ports:
      - "${FRONTEND_PORT}:80"

  laravel-webserver:
    image: nginx:stable-alpine # get a stable lightweight version of nginx
    container_name: ${PROJECT_NAME}_webserver 
    working_dir: ${LARAVEL_ROOT} 
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # replace default.conf and make it read-only to prevent container write something to our original file
      - ./application:${LARAVEL_ROOT} 
    ports:
      - "${WEB_SERVER_PORT}:80" 
    restart: unless-stopped
    depends_on:
      - laravel-php-fpm
  

  laravel-php-fpm:
    build: 
      context: ./docker/php-fpm # specify in which directory to look for Dockerfile, directory is relative to the location of this docker-compose.yml file
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_php-fpm 
    working_dir: ${LARAVEL_ROOT} 
    user: "1000:1000"
    environment:
      APP_ENV: local
      APP_DEBUG: true
      APP_NAME: ${PROJECT_NAME}
      DB_CONNECTION: mysql
      DB_HOST: laravel-mysql # the same as the service name of the mysql container, this is how we connect to the database
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./application:${LARAVEL_ROOT} 
    restart: unless-stopped
    depends_on:
      - laravel-mysql


  laravel-mysql:
    image: mysql:8.0
    container_name: ${PROJECT_NAME}_db 
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD} 
      MYSQL_DATABASE: ${DB_DATABASE} 
      MYSQL_USER: ${DB_USER} 
      MYSQL_PASSWORD: ${DB_PASSWORD} 
    volumes:
      - mysql-data:/var/lib/mysql # this is a named volume that will be created by docker, it will store mysql data in a separate location on our system to persist data
    ports:
      - "${DB_PORT}:3306" 
    restart: unless-stopped


  composer:
    image: composer:2
    container_name: ${PROJECT_NAME}_composer 
    working_dir: ${LARAVEL_ROOT} 
    user: "1000:1000"
    volumes:
      - ./application:${LARAVEL_ROOT} 
    entrypoint: ["composer", "--ignore-platform-reqs"]


  artisan:
    build: 
        context: ./docker/php-fpm # specify in which directory to look for Dockerfile, directory is relative to the location of this docker-compose.yml file
        dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_artisan 
    working_dir: ${LARAVEL_ROOT} 
    user: "1000:1000"
    environment:
      DB_CONNECTION: mysql
      DB_HOST: laravel-mysql # the same as the service name of the mysql container, this is how we connect to the database
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./application:${LARAVEL_ROOT} 
    entrypoint: ["php", "artisan"] # when we run "docker compose run --rm artisan" we don't need to write "php artisan" after to execute commands, we can run command like this "docker compose run --rm artisan migrate" right away
    command: ["--version"] # override the default command specified in Dockerfile
    depends_on:
      - laravel-mysql


volumes:
  mysql-data: # named volume for mysql data that is necessary to create to use it in mysql service
    driver: local
